from OpenGL.GL import *

class BounceMAP:
    def __init__(self, Xo, Yo, Zo, w):
        self.x = Xo
        self.y = Yo
        self.z = Zo
        self.w = w
        self.Lvl = 1
        self.color = ((74/255,199/255,162/255), (74/255,199/255,162/255),(132/255,226/255,198/255),(168/255,255/255,255/255))
        self.Load_show = False

    def draw(self,Bx, By, Br, Hp):
        if self.Lvl==2 and self.Load_show:
            pass
        else:
            self.Obstacle(Bx, By, Br, Hp)

    def update(self):
        mld = []
        for i in range(len(self.map())):
            p = self.map()[i]
            mld.append((self.x + p[1] * 2, self.y - p[0] * 2 + 2, p[2] * self.w, p[3] * self.w, p[4]))  # x,y,wid,hgh,cond
        return mld

    def map(self):
        blks = 0
        if self.Lvl==1:
            blks = [(0, 0, 124, 1, 2), (8, 0, 117, 1, -2), (8, 121, 4, 1, -2), (1, 0, 2, 7, None), (1, 5, 4, 5, 1), (4, 12, 2, 4, -1), (1, 17, 2, 3, 1), (5, 21, 2, 3, -1),
                    (5, 23, 2, 1, 0), (5, 28, 1, 1, 0), (5, 29, 2, 2, 5), (5, 31, 1, 1, 0), (4, 37, 2, 1, 0),(4, 39, 2, 3, 0), (3, 47, 7, 1, 0), (1, 54, 1, 3, 0),
                    (5, 57, 2, 3, -1), (3, 61, 1, 2, 0), (7, 64.5, 1, 1, -1), (1, 67, 2, 5, 1), (5, 71, 1, 3, -1),(6, 72, 1, 2, -3), (7, 73, 1, 1, -3), (3, 74, 4, 1, 0),
                    (1, 80, 3, 2, 1), (7, 80, 1, 1, -4), (6, 81, 1, 2, -4), (5, 82, 1, 3, -1), (4, 85, 2, 2, 6), (3, 87, 2, 1, 0), (3,92,3,1,0), (3,97,4,1,0),
                    (7, 93, 2, 1, -1), (6, 97, 2, 2, -1), (1, 102, 1, 4, 1), (5, 104, 2, 3, -1), (7, 106, 4, 1, -4), (6, 110, 2, 2, -1), (1, 116, 7, 5, 1), (1, 123, 2, 7, None)]
        elif self.Lvl==2:
            blks = [(18,63,54,1, 2),(18,121,67,1, 2),(27,63,19,1,-2), (27,86,3,1,-2), (27,92,3,1,-2), (27,98,4,1,-2), (27,106,23,1,-2), (27,134,2,1,-2), (27,139,4,1,-2), (27,145,2,1,-2),
                    (27,149,4,1,-2),(27,158,15,1,-2), (27,176,12,1,-2),(19,63,2,8,None), (10,113,4,9, None),(10,121,4,9, None),
                    (25,65,1,1,0), (22,68,3,1,0), (23,71,2,1,7), (23,73,2,4,-1),(23,79,3,1,0), (21,86,1,1,0), (21,87,1,2,5), (22,91,2,1,0), (21,95,4,1,0), (21,102,4,1,0), (21,106,1,2,0), (25,110,2,2,-1),
                    (21,116,1,2,5),(22,117,4,1,0), (21,121,1,2,5), (19,125,2,5,1), (23,132,3,1,0), (22,140,1,1,0), (22,141,2,5,-1), (24,149,2,3,-1), (23,153,4,1,0), (25,160,1,2,-1),
                    (25,164,1,1,0), (21,167,1,4,5), (24,168,2,1,0), (19,169,1,3,1), (21,170,4,1,0), (22,178,1,1,0), (26,180,3,1,-1), (21,182,6,6,-1)]
        elif self.Lvl==3:
            blks = [(27,182,7,1,-2), (27,198,4,1,-2), (27,206,4,1,-2), (27,215,10,1,-2), (0,150,100,1,2), (8,150,39,1,-2), (18,199,26,1,2), (18,182,7,1,2), (8,199,51,1,-2), (27,193,1,1,-1),
                    (1,150,2,7,None), (19,182,2,8, None), (25,184,2,2,-1), (21,186,2,6,-1), (23,199,1,4,-1), (21,203,3,1,0), (26,206,1,1,-4), (25,207,1,2,-4), (24,208,1,3,-4), (23,209,1,1,0),  #Right Bottom
                    (23,215,1,1,0), (21,216,1,3,5), (25,217,2,1,0), (19,218,1,4,1), (21,221,1,5,5), (19,223,2,8, None),
                    (4,154,2,4,-1), (3,158,4,2,0), (3,162,3,3,5), (3,165,4,2,0), (3,171,1,5,-1),(5,174,1,1,0), (3,177,1,4,0), (7,179.5,1,1,-1), (1,179,6,2,1), (5,182,1,3,-1),  (3,186,2,4,0), #Left Top
                    (22,191,1,1,0), (23,196,1,1,0), (18,194,1,1,0), (15,190,1,1,0), (12,197,1,1,0), (8,192,1,1,0), (4,197,1,1,0), (4,190,1,1,0), (8,187,2,11, None), (8,199,2,11, None), # Center
                    (3,200,1,5,-1), (7,201,1,1,-3), (3,205,4,2,0), (3,210,3,2,0), (7,213,1,1,-1), (3,214,1,5,-1), (3,215,1,1,5), (6,216,1,1,0), (3,217,1,4,0), (3,218,1,1,0), #Right Top
                    (3,220,1,1,0), (3,221,1,3,0), (5,222,1,1,7), (1,223,1,3,1), (6,224,1,1,0), (3,225,1,4,0), (1,227,1,5,1), (4,229,1,2,6), (3,230,1,1,0), (6,232,1,1,0), (3,234,1,1,0),
                    (4,235,1,2,7), (1,237,1,5,1), (4,238,1,1,0), (7,239,1,1,-1), (3,240,1,5,-1), (1,243,5,6,1), (1,248,2,7, None)]
        return blks

    def Obstacle(self, Bx, By, Br, Hp):
        StartBLK = 0
        if self.Lvl==1:
            StartBLK = 3
        elif self.Lvl==2:
            StartBLK = 13
        elif self.Lvl==3:
            StartBLK = 10
        if Hp>=3:
            self.color = ((74/255,199/255,162/255), (74/255,199/255,162/255),(132/255,226/255,198/255),(168/255,255/255,255/255))
        elif Hp==2:
            self.color = ((204/255, 180/255, 50/255), (204/255, 180/255, 50/255), (220/255, 203/255, 111/255), (248/255, 247/255, 145/255))
        else:
            self.color = ((197/255, 0, 0), (197/255, 0, 0), (206/255, 111/255, 162/255), (244/255, 146/255, 176/255))
        for i in range(StartBLK, len(self.update())):
            Block = self.update()[i]
            allow = True
            if self.Lvl==3 and Bx-24<Block[0]<Bx+24:
                if 156+Br<Bx<176-Br:
                    if Block[1]-Block[3]>By+Br+14 or Block[1]<By-Br-14:
                        allow = False
                else:
                    if By < -5 and not Block[1] < -5 or By >= -5 and not Block[1] >= -5:
                        allow = False
            if Bx-25<Block[0]<Bx+25 and allow:
                Vtx = [(Block[0], Block[1], self.z-1), (Block[0] + Block[2], Block[1], self.z-1), (Block[0] + Block[2],  Block[1], self.z + 1), (Block[0], Block[1], self.z + 1),
                       (Block[0], Block[1]-Block[3], self.z-1), (Block[0] + Block[2], Block[1]-Block[3], self.z-1), (Block[0] + Block[2],  Block[1]-Block[3], self.z + 1), (Block[0], Block[1]-Block[3], self.z + 1)]
                Surf = [(0, 1, 2, 3), (4, 5, 6, 7), (0, 1, 5, 4), (3, 2, 6, 7), (3, 0, 4, 7), (2, 1, 5, 6)]
                glBegin(GL_QUADS)
                for surface in Surf:
                    x = 0
                    for vertex in surface:
                        glColor3fv(self.color[x])
                        glVertex3fv(Vtx[vertex])
                        x += 1
                glEnd()